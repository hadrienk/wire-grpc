/**
 * Copyright 2021 Hadrien Kohl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by Wire protocol buffer compiler, do not edit.
// Source: io.hadrien.wire.TestGrpcService in test.proto
package io.hadrien.wire

import com.squareup.wire.GrpcCall
import com.squareup.wire.GrpcClient
import com.squareup.wire.GrpcMethod
import com.squareup.wire.GrpcStreamingCall

public class GrpcTestGrpcServiceClient(
  private val client: GrpcClient
) : TestGrpcServiceClient {
  public override fun Unary(): GrpcCall<Input, Output> = client.newCall(GrpcMethod(
      path = "/io.hadrien.wire.TestGrpcService/Unary",
      requestAdapter = Input.ADAPTER,
      responseAdapter = Output.ADAPTER
  ))

  public override fun Outbound(): GrpcStreamingCall<Input, Output> =
      client.newStreamingCall(GrpcMethod(
      path = "/io.hadrien.wire.TestGrpcService/Outbound",
      requestAdapter = Input.ADAPTER,
      responseAdapter = Output.ADAPTER
  ))

  public override fun Inbound(): GrpcStreamingCall<Input, Output> =
      client.newStreamingCall(GrpcMethod(
      path = "/io.hadrien.wire.TestGrpcService/Inbound",
      requestAdapter = Input.ADAPTER,
      responseAdapter = Output.ADAPTER
  ))

  public override fun InboundOutbound(): GrpcStreamingCall<Input, Output> =
      client.newStreamingCall(GrpcMethod(
      path = "/io.hadrien.wire.TestGrpcService/InboundOutbound",
      requestAdapter = Input.ADAPTER,
      responseAdapter = Output.ADAPTER
  ))
}

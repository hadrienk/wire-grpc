/**
 * Copyright 2021 Hadrien Kohl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by Wire protocol buffer compiler, do not edit.
// Source: io.hadrien.wire.Output in test.proto
package io.hadrien.wire

import com.squareup.wire.*
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.internal.sanitize
import okio.ByteString

public class Output(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val content: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Output, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw AssertionError()

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Output) return false
    if (unknownFields != other.unknownFields) return false
    if (content != other.content) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + content.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """content=${sanitize(content)}"""
    return result.joinToString(prefix = "Output{", separator = ", ", postfix = "}")
  }

  public fun copy(content: String = this.content, unknownFields: ByteString = this.unknownFields):
      Output = Output(content, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Output> = object : ProtoAdapter<Output>(
      FieldEncoding.LENGTH_DELIMITED, 
      Output::class, 
      "type.googleapis.com/io.hadrien.wire.Output", 
      PROTO_3, 
      null
    ) {
      public override fun encodedSize(value: Output): Int {
        var size = value.unknownFields.size
        if (value.content != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.content)
        return size
      }

      public override fun encode(writer: ProtoWriter, value: Output): Unit {
        if (value.content != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.content)
        writer.writeBytes(value.unknownFields)
      }

      public override fun decode(reader: ProtoReader): Output {
        var content: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> content = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Output(
          content = content,
          unknownFields = unknownFields
        )
      }

      public override fun redact(value: Output): Output = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
